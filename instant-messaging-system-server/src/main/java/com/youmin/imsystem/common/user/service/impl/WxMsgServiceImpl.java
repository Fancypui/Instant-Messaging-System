package com.youmin.imsystem.common.user.service.impl;

import cn.hutool.core.util.StrUtil;
import com.youmin.imsystem.common.user.dao.UserDao;
import com.youmin.imsystem.common.user.domain.entity.User;
import com.youmin.imsystem.common.user.service.UserService;
import com.youmin.imsystem.common.user.service.WxMsgService;
import com.youmin.imsystem.common.user.service.adapter.TextBuilder;
import com.youmin.imsystem.common.user.service.adapter.UserAdapter;
import com.youmin.imsystem.common.user.service.WebsocketService;
import lombok.extern.slf4j.Slf4j;
import me.chanjar.weixin.common.bean.WxOAuth2UserInfo;
import me.chanjar.weixin.mp.api.WxMpService;
import me.chanjar.weixin.mp.bean.message.WxMpXmlMessage;
import me.chanjar.weixin.mp.bean.message.WxMpXmlOutMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.net.URLEncoder;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service
public class WxMsgServiceImpl implements WxMsgService {

    private static final ConcurrentHashMap<String,Integer> OPENID_LOGINCODE_MAP =
            new ConcurrentHashMap<>();

    @Value("${imsystem.wx.callback}")
    private String callback;
    /**
     * Authentication URL, where wechat will display this url as text, allowing user to authenticate themselves
     * by clicking this url
     * Once user is authenticate, wechat will invoke the callback the url (callback url is the value of redirect_uri
     *  in the below url)
     */
    private static final String URL = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=%s&redirect_uri=%s&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect";

    @Autowired
    private WxMpService wxMpService;

    @Autowired
    private UserDao userDao;

    @Autowired
    private UserService userService;
    @Autowired
    private WebsocketService websocketService;

    /**
     * Handling if user has scan the qr code generated by wechat SDK
     * @param wxMsg
     * @return
     */
    @Override
    public WxMpXmlOutMessage scan(WxMpXmlMessage wxMsg) {
        String openId = wxMsg.getFromUser();
        Integer eventKey = getEventKey(wxMsg);
        User user = userDao.getUserByOpenId(openId);
        if(Objects.isNull(eventKey)){
            return null;
        }
        boolean registered = Objects.nonNull(user);
        boolean authorized = registered && Objects.nonNull(user.getAvatar());
        //if user has already registered and authorized
        if (registered && authorized) {
            this.websocketService.scanLoginSuccess(eventKey,user.getId());
            return null;
        }
        //register user if user not yet register, save him/her
        if (!registered) {
            User insert = UserAdapter.buildUser(openId);
            userService.registered(insert);
        }
        OPENID_LOGINCODE_MAP.put(openId,eventKey);
        //inform client-side that currently is in the 'waiting authorization stage'
        websocketService.waitAuthorized(eventKey);
        String authenticateUrl = String.format(URL, wxMpService.getWxMpConfigStorage().getAppId(),
                URLEncoder.encode(callback + "/wx/portal/public/callBack"));
        return TextBuilder.build("Please click the link to authenticate: " + "<a href=\"" + authenticateUrl +
                "\">Register Imsystem Account</a>", wxMsg);
    }

    @Override
    public void authorized(WxOAuth2UserInfo userInfo) {
        String openid = userInfo.getOpenid();
        User user = userDao.getUserByOpenId(openid);
        //update user info
        if(StrUtil.isBlank(user.getAvatar())){
            fillInWithUserInfo(userInfo,user.getId());
        }
        //use openid to find code
        Integer code = OPENID_LOGINCODE_MAP.remove(openid);
        websocketService.scanLoginSuccess(code,user.getId());
    }

    private void fillInWithUserInfo(WxOAuth2UserInfo userInfo, Long uid){
        User user = UserAdapter.buildAuthorizedUser(userInfo, uid);
        userDao.updateById(user);
    }

    //get login code
    private Integer getEventKey(WxMpXmlMessage wxMpXmlMessage){

        try{
            String eventKey = wxMpXmlMessage.getEventKey();
            //remove the prefix to get the unique code (for subscription event)
            String code = eventKey.replace("qrscene_", "");
            return Integer.parseInt(code);
        }catch (Exception e){
            log.error("getEvent Key Error:{}",wxMpXmlMessage);
            return null;
        }
    }
}